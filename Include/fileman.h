// ==================================================================
//  class:  CUT_DataManager, CUT_UserManager, CUT_UserInfo
//  struct: CUT_QUEFileHandleList
//  File:   fileman.h
//  
//  Purpose:
//
//  Declaration of mail server file and user utility classes
//
// ==================================================================
// Ultimate TCP/IP v4.2
// This software along with its related components, documentation and files ("The Libraries")
// is © 1994-2007 The Code Project (1612916 Ontario Limited) and use of The Libraries is
// governed by a software license agreement ("Agreement").  Copies of the Agreement are
// available at The Code Project (www.codeproject.com), as part of the package you downloaded
// to obtain this file, or directly from our office.  For a copy of the license governing
// this software, you may contact us at legalaffairs@codeproject.com, or by calling 416-849-8900.
// ==================================================================
 
#ifndef CUT_DataManagerInclude
#define CUT_DataManagerInclude

class CUT_MailServer;
class CUT_UserInfo;
class CUT_QUEFileHandle;

#include <time.h>
#include <UT_CriticalSection.h>



// suppress level 4 warnings generated by STL - Transitional for VC6 support
#pragma warning ( push, 3 )	
#pragma warning (disable : 4018)
#include <vector>
#pragma warning (pop)
#pragma warning ( push, 3 )		
#include <list>
#pragma warning (pop)



using namespace std ;

typedef list<CUT_UserInfo>      USER_LIST;          // User information list
typedef list<CUT_QUEFileHandle> QUEUE_FILE_LIST;    // Queue file handles list
typedef vector<long>            LONG_VECTOR;        // Long vector


#define     MAX_USER_NAME_LENGTH    100

// ===================================
//  User information class
// ===================================
class CUT_UserInfo {
public:

    _TCHAR  szUserName[MAX_USER_NAME_LENGTH + 1];   // User name
    _TCHAR  szPassword[MAX_USER_NAME_LENGTH + 1];   // User password
    _TCHAR	szMailDir[MAX_PATH+1];                  // User mail directory

    CUT_TStringList  listEmailAddresses;             // List of e-mail addresses

    LONG_VECTOR     vcFileList;                     // List of Files IDs
    LONG_VECTOR     vcFileDeleteList;               // List of Deleted Files IDs
    LONG_VECTOR     vcFileSizeList;                 // List of Files lengths
    int             nFileListLength;                // Number of files in the list
    BOOL            bOpenFlag;                      // If TRUE user is opened
    long            nID;                            // User ID

public:

    // Default constructor
    CUT_UserInfo() : nID(-1), bOpenFlag(FALSE), nFileListLength(0)
    {
        szUserName[0] = szPassword[0] = 0;
    }

};


// ===================================
//  Linked list item of open files and their names
// ===================================
class CUT_QUEFileHandle {
public:
    long    m_lHandle;                              // File handle
    _TCHAR    m_szFileName[MAX_PATH + 1];         // File name

    // Default constructor
    CUT_QUEFileHandle() : m_lHandle(0)
    {
        m_szFileName[0] = 0;
    }

    // Constructor
    CUT_QUEFileHandle(long lHandle, LPCTSTR szFileName) : m_lHandle(lHandle)
    {
#pragma warning(disable : 4996)
        _tcsncpy(m_szFileName, szFileName, MAX_PATH);
        m_szFileName[MAX_PATH] = 0;
#pragma warning(default : 4996)
    }

};


// ===================================
//  Data manager class
// ===================================
class CUT_DataManager {

protected:
    CUT_MailServer          *m_ptrMailServer;       // Pointer to the Mail Server class
    QUEUE_FILE_LIST         m_listFileHandle;       // Queue file handles list
    CUT_InitCriticalSection	m_criticalSection;      // Critical section
    
protected:

    // Adds a file handle and name to a linked list
    virtual void    Que_AddFileHandle(long handle,LPCTSTR fileName);

    // Returns a filename from its handle
    virtual LPCTSTR  Que_GetFileName(long handle);

    // Removes the given handle from the file handle linked list
    virtual void    Que_RemoveFileHandle(long handle);

public:

    // Constructor/Destructor
    CUT_DataManager(CUT_MailServer &ptrMailServer);
    virtual ~CUT_DataManager();

    // Opens a file from the QUE
    virtual long    Que_OpenFile();

    // Creates a new file for writing to in the QUE
    virtual long    Que_CreateFile();

    // Closes an open QUE file
    virtual int     Que_CloseFile(long fileHandle,BOOLEAN deleteFlag = FALSE);

    // Reads bytes from the given file
    virtual int     Que_ReadFile(long fileHandle,LPBYTE buf,int bufLen);

    // Reads the header information from the given file.
    // Header information includes, to, from, write time, retry count, 
    // and if the mail is being returned
    virtual int     Que_ReadFileHeader(long fileHandle,LPSTR to,int maxToLen,LPSTR from,
                            int maxFromLen,time_t* tm,DWORD *numRetries,DWORD * returnMail);

    // Writes the given data to an open QUE file
    virtual int     Que_WriteFile(long fileHandle,LPBYTE buf,int bufLen);

    // Writes a file header to a QUE file.
    // Header items include to, form, retry count and if the mail is being returned
    virtual int     Que_WriteFileHeader(long fileHandle,LPCSTR to,LPCSTR from, DWORD numRetries,DWORD returnMail);
    virtual int     Que_WriteFileHeader(long fileHandle,DWORD numRetries,DWORD returnMail);

    // Copies a QUE file to another QUE file but changes the TO: name to the given name
    virtual int     Que_CarbonCopyFile(long origFileHandle,LPCSTR toAddr);

};


// ===================================
//  User manager class
// ===================================
class CUT_UserManager {

protected:
    CUT_MailServer      *m_ptrMailServer;       // Pointer to the Mail Server class
    USER_LIST           m_userList;             // User information list
    CUT_InitCriticalSection m_criticalSection;	// Critical section
    BOOL                bUserInfoChanged;       // TRUE if the user info have been changed

public:

    // Constructor/Destructor
    CUT_UserManager(CUT_MailServer &ptrMailServer);
    virtual ~CUT_UserManager();

    // Loads/Save users settings from the registry
    virtual int     LoadUserInfo(LPCTSTR subKey);
    virtual int     SaveUserInfo(LPCTSTR subKey);

    // Opens/Close the given users account
    virtual long    User_OpenUser(LPCTSTR user,LPCTSTR password);
    virtual long    User_CloseUser(long userHandle);

    // Adds new user to the list
    virtual int     User_Add(LPCTSTR lpszName, LPCTSTR szPassword, CUT_TStringList &MailAddresses);
    virtual int     User_Add(LPCTSTR lpszName, LPCTSTR szPassword, LPCTSTR MailAddress);

    // Delete user from the list
    virtual int     User_Delete(LPCTSTR lpszName);

    // Modify user from the list
    virtual int     User_Modify(LPCTSTR lpszName, LPCTSTR lpszNewName, LPCTSTR lpszNewPassword, CUT_TStringList *listNewAddresses);
    
    // Returns number of users in the list
    virtual int     User_GetCount();

    // Returns number of users in the list
    virtual CUT_UserInfo * User_GetUser(int index);

    // Returns the number of files available in the the users email box
    virtual int     User_GetFileCount(long userHandle);
    
    // Returns the file ID and size of a file in the users email box
    virtual long    User_GetFileSize(long userHandle,int index);
    virtual long    User_GetFileID(long userHandle,int index);
    
    // Opens a file in the users email box
    virtual long    User_OpenFile(long userHandle,int index);

    // Creates a new file for writing in a USER email box
    virtual long    User_CreateUserFile(LPCTSTR emailAddress);

    // Reads/Writes bytes from the open USER file
    virtual int     User_ReadFile(long fileHandle,LPBYTE buf,int bufLen);
    virtual int     User_WriteFile(long fileHandle,LPBYTE buf,int bufLen);

    // Closes an open USER file
    virtual int     User_CloseFile(long fileHandle);

    // Puts the given file into the delete list
    virtual int     User_DeleteFile(long userHandle,int index);

    // Clears all user files from the delete list
    virtual int     User_ResetDelete(long userHandle);

    // Returns a list of available files in a users account
    virtual int     User_GetFileList(CUT_UserInfo *info);

    // Deletes all the files found the the USER delete file list
    virtual int     User_DeleteAllFiles(CUT_UserInfo *info);

    // Gets free user mail directory name
    virtual int     User_GetFreeMailDir(CUT_UserInfo &info);

    // Checks if the file marked for deletion
    virtual BOOL    User_IsFileDeleted(long userHandle, int nFileIndex);
};

#endif