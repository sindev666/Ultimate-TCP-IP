// =================================================================
//  class: CUT_POP3Client
//  File:  pop3_c.h
//  
//  Purpose:
//
//  POP3 Client Class declaration
//  
//  Implementation of Post Office version 3 Protocol client.
//
//  RFC  1939
//      
// ===================================================================
// Ultimate TCP/IP v4.2
// This software along with its related components, documentation and files ("The Libraries")
// is © 1994-2007 The Code Project (1612916 Ontario Limited) and use of The Libraries is
// governed by a software license agreement ("Agreement").  Copies of the Agreement are
// available at The Code Project (www.codeproject.com), as part of the package you downloaded
// to obtain this file, or directly from our office.  For a copy of the license governing
// this software, you may contact us at legalaffairs@codeproject.com, or by calling 416-849-8900.
// ===================================================================

#ifndef POP3_CLIENT_H
#define POP3_CLIENT_H


#include "ut_clnt.h"   
#include "UTMessage.h"   

// suppress level 4 warnings generated by STL - Transitional for VC6 support
#pragma warning ( push, 3 )		
#pragma warning (disable : 4018)
#include <string>
#pragma warning (pop)
#pragma warning ( push, 3 )	
#pragma warning (disable : 4018)
#include <vector>
#pragma warning (pop)


#define MAX_UID_STRING_LENGTH   70

using namespace std;

/********************************
*********************************/
class CUT_POP3Client :public CUT_WSClient{

    typedef struct MessageUIDTag {
        long        m_nMessageNumber;   // Message number
        string      m_strUID;           // UID string
    } MessageUID;

    typedef vector<MessageUID> MESSAGE_UID_VEC;

protected: // changed to protected to allow for data access in case of inheritence 

        unsigned int    m_nPort;                // Connect port
        int             m_nPOP3TimeOut;         // POP3 time out in sec.
        int             m_nConnectTimeout;      // the wait for connect time out 
        char            m_szBuf[1024];          // generic storage buffer
        BOOL            m_bMsgOpen;             // is there a message that is open already?
        BOOL            m_bReadMsgFinished;     // are we done reading the message?

        BOOL            m_bTopOpen;             // is there a message that is open already for TOP command ?
        BOOL            m_bReadTopFinished;     // are we done reading the message?

        MESSAGE_UID_VEC m_vecUID;               // vector of retrieved UIDs


        // Routine to get the response code from the server
        BOOL    GetResponseCode(int /* timeOut */);

        // Virtual function to be overridden to report the save message progress
        virtual BOOL OnSaveMsg(long /* bytesRetrieved */);

		int SocketOnConnected(SOCKET s, const char *lpszName);
  
    public:

        CUT_POP3Client();
        virtual ~CUT_POP3Client();


        // Set/Get connect port
        int     SetPort(unsigned int newPort);
        unsigned int  GetPort() const;

        // Set/Get connect time out
        int     SetConnectTimeout(int secs);
        int     GetConnectTimeout() const;

        // Set/Get POP3 time out
        int     SetPOP3TimeOut(int timeout);
        int     GetPOP3TimeOut() const;

        // Connect to the pop 3 server
        virtual int     POP3Connect(LPCSTR  /* mailHost */,LPCSTR  /* user */,LPCSTR /* password */);
#if defined _UNICODE
        virtual int     POP3Connect(LPCWSTR  /* mailHost */,LPCWSTR  /* user */,LPCWSTR /* password */);
#endif 
        // Close the pop3 connection 
        virtual int     POP3Close();

        // Get the number of available messages
        virtual int     GetNumMsgs(int*  /* number */);

        // Get  the size of the message specified by the index
        virtual int     GetMsgSize(int /* index */ ,long*  /* size */);

        // Save the specified message to a disk storage
        virtual int     SaveMsg(int /* index */ , LPCTSTR /* fileName */);

        // Save the specified message to the data source 
        virtual int     SaveMsg(int /* index */ , CUT_DataSource & /* dest */);

        // Open the message for reading
        virtual int     OpenMsg(int /* index */);

        // Read a line from the already open message 
        virtual int     ReadMsgLine(LPSTR /* buf */,int bufLen = 1024);
#if defined _UNICODE
        virtual int     ReadMsgLine(LPWSTR /* buf */,int bufLen = 1024);
#endif

        // Close the currently open message if any 
        virtual int     CloseMsg();

        // Get the UIDs of one or all messages from the server
        virtual int     RetrieveUID(int msgNumber = -1);

        // Get the message UID previusly retrived by RetrieveUID function
        virtual LPCSTR  GetUID(int /* msgNumber */);
	// v4.2 Refactored - added interface with LPSTR and LPWSTR params
		int GetUID(LPSTR uid, size_t maxSize, int msgNumber, size_t *size);
#if defined _UNICODE
		int GetUID(LPWSTR uid, size_t maxSize, int msgNumber, size_t *size);
#endif

        // Open the nmessage for TOP command
        virtual int     OpenTop(int /* index */,int /* msgLines */);

        // Read a line from the message opened with TOP command
        virtual int     ReadTopLine(LPSTR buf,int bufLen = 1024);
#if defined _UNICODE
        virtual int     ReadTopLine(LPWSTR buf,int bufLen = 1024);
#endif

        // Close any message open for TOP command
        virtual int     CloseTop();

        // Delete the message specified by the index for the POP3 storage
        virtual int     DeleteMsg(int /* index */ );

        // If any messages have been marked as deleted by the pop3 server they are unmarked.
        virtual int     ResetDelete();
      


};



#endif // End pop3_c.h

